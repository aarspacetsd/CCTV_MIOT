# docker-compose.yml (Versi Swarm)
version: '3.8'

services:
  # Service untuk Aplikasi Laravel
  app:
    # PENTING: Opsi 'build' dihapus. Image akan diambil dari registry.
    # Ganti 'your-dockerhub-username/your-app-name' dengan nama image Anda di Docker Hub.
    image: aarcsti/cctv-miot-app:latest
    working_dir: /var/www/html
    volumes:
      # Kode sekarang ada di dalam image, jadi kita hanya butuh volume untuk storage.
      - laravel-storage:/var/www/html/storage
      - laravel-bootstrap-cache:/var/www/html/bootstrap/cache
    networks:
      - laravel-net
    # Environment file akan dibaca dari .env di repository
    env_file:
      - .env

  # Service untuk Database (MySQL)
  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: ${Sistem_Camera_MIOT}
      MYSQL_ROOT_PASSWORD: ${root} # Password root
      MYSQL_PASSWORD: ${miot123}      # Password user
      MYSQL_USER: ${miot}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - laravel-net

  # Service untuk Web Server (Nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      # Kode aplikasi tidak lagi di-mount di sini karena Nginx akan meneruskan request PHP ke service 'app'
      # File statis akan disalin ke image Nginx atau dilayani oleh Laravel.
      # Untuk setup sederhana, kita akan biarkan Laravel yang menangani file statis.
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - laravel-net
    depends_on:
      - app

  # Service untuk phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8081:80"
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    networks:
      - laravel-net
    depends_on:
      - db

# Definisi network
networks:
  laravel-net:
    # PENTING: Driver diubah menjadi 'overlay' agar kompatibel dengan Swarm
    driver: overlay
    attachable: true

# Definisi volume
volumes:
  db-data:
  laravel-storage:
  laravel-bootstrap-cache:
